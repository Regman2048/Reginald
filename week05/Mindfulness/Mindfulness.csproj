using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Diagnostics; // For Stopwatch to accurately track duration

namespace MindfulnessApp
{
    // Base class for all mindfulness activities
    public abstract class BaseActivity
    {
        protected string _name;
        protected string _description;
        protected int _duration; // Duration in seconds

        public BaseActivity(string name, string description)
        {
            _name = name;
            _description = description;
        }

        // Method to display the common starting message
        protected void DisplayStartingMessage()
        {
            Console.Clear();
            Console.WriteLine($"\n--- {_name} ---");
            Console.WriteLine(_description);

            // Input validation for duration
            while (true)
            {
                Console.Write("Enter the duration of the activity in seconds: ");
                string input = Console.ReadLine();
                if (int.TryParse(input, out int duration) && duration > 0)
                {
                    _duration = duration;
                    break;
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter a positive whole number for the duration.");
                }
            }

            Console.WriteLine("Prepare to begin...");
            PauseWithCountdown(3); // Pause for 3 seconds
        }

        // Method to display the common ending message
        protected void DisplayEndingMessage()
        {
            Console.WriteLine("\nYou've done a good job!");
            PauseWithSpinner(3); // Pause with spinner for 3 seconds
            Console.WriteLine($"You have completed the {_name} activity for {_duration} seconds.");
            PauseWithSpinner(3); // Pause with spinner for 3 seconds
            Console.WriteLine("Press Enter to return to the menu...");
            Console.ReadLine(); // Wait for user to acknowledge
        }

        // Pauses the program and displays a countdown timer
        protected void PauseWithCountdown(int seconds)
        {
            for (int i = seconds; i > 0; i--)
            {
                Console.Write($"Starting in... {i} \r"); // \r returns cursor to the beginning of the line
                Thread.Sleep(1000); // 1 second
            }
            Console.Write("                 \r"); // Clear the countdown line
        }

        // Pauses the program and displays a spinning animation
        protected void PauseWithSpinner(int seconds)
        {
            char[] spinnerChars = { '|', '/', '-', '\\' };
            DateTime startTime = DateTime.Now;
            int i = 0;
            while ((DateTime.Now - startTime).TotalSeconds < seconds)
            {
                Console.Write(spinnerChars[i % spinnerChars.Length] + "\r");
                Thread.Sleep(100); // 0.1 seconds
                i++;
            }
            Console.Write(" \r"); // Clear the spinner
        }

        // Abstract method to be implemented by derived classes
        protected abstract void PerformActivity();

        // Template method to run the entire activity flow
        public void Run()
        {
            DisplayStartingMessage();
            PerformActivity();
            DisplayEndingMessage();
        }
    }

    // Breathing Activity
    public class BreathingActivity : BaseActivity
    {
        public BreathingActivity() : base(
            "Breathing Activity",
            "This activity will help you relax by walking you through breathing in and out slowly. Clear your mind and focus on your breathing."
        ) { }

        protected override void PerformActivity()
        {
            Stopwatch timer = new Stopwatch();
            timer.Start();

            while (timer.Elapsed.TotalSeconds < _duration)
            {
                // Simulate "Breathe in..." animation
                Console.WriteLine("Breathe in...");
                int breathInDuration = 4;
                for (int i = 0; i < breathInDuration * 10; i++)
                {
                    // Simple animation: text grows longer
                    Console.Write("Breathe in" + new string('.', i / 10) + "\r");
                    Thread.Sleep(100);
                    if (timer.Elapsed.TotalSeconds >= _duration) break;
                }
                Console.Write("                       \r"); // Clear line

                if (timer.Elapsed.TotalSeconds >= _duration) break;

                // Simulate "Breathe out..." animation
                Console.WriteLine("Breathe out...");
                int breathOutDuration = 6;
                for (int i = breathOutDuration * 10; i >= 0; i--)
                {
                    // Simple animation: text shrinks
                    Console.Write("Breathe out" + new string('.', i / 10) + "\r");
                    Thread.Sleep(100);
                    if (timer.Elapsed.TotalSeconds >= _duration) break;
                }
                Console.Write("                       \r"); // Clear line
            }
            timer.Stop();
        }
    }

    // Reflection Activity
    public class ReflectionActivity : BaseActivity
    {
        private List<string> _prompts = new List<string>
        {
            "Think of a time when you stood up for someone else.",
            "Think of a time when you did something really difficult.",
            "Think of a time when you helped someone in need.",
            "Think of a time when you did something truly selfless."
        };

        private List<string> _questions = new List<string>
        {
            "Why was this experience meaningful to you?",
            "Have you ever done anything like this before?",
            "How did you get started?",
            "How did you feel when it was complete?",
            "What made this time different than other times when you were not as successful?",
            "What is your favorite thing about this experience?",
            "What could you learn from this experience that applies to other situations?",
            "What did you learn about yourself through this experience?",
            "How can you keep this experience in mind in the future?"
        };

        private List<string> _unusedQuestions; // To ensure unique questions per session
        private Random _random = new Random();

        public ReflectionActivity() : base(
            "Reflection Activity",
            "This activity will help you reflect on times in your life when you have shown strength and resilience. This will help you recognize the power you have and how you can use it in other aspects of your life."
        )
        {
            _unusedQuestions = new List<string>(_questions); // Initialize with all questions
        }

        private string GetRandomQuestion()
        {
            if (!_unusedQuestions.Any())
            {
                // If all questions have been used, reset the list
                _unusedQuestions = new List<string>(_questions);
            }
            int index = _random.Next(_unusedQuestions.Count);
            string question = _unusedQuestions[index];
            _unusedQuestions.RemoveAt(index); // Remove to ensure uniqueness for this session
            return question;
        }

        protected override void PerformActivity()
        {
            string prompt = _prompts[_random.Next(_prompts.Count)];
            Console.WriteLine(prompt);
            PauseWithSpinner(5); // Pause to let user think about the prompt

            Stopwatch timer = new Stopwatch();
            timer.Start();

            while (timer.Elapsed.TotalSeconds < _duration)
            {
                string question = GetRandomQuestion();
                Console.WriteLine($"\n> {question}");
                PauseWithSpinner(8); // Pause after each question for reflection

                // Break early if duration is met during the pause
                if (timer.Elapsed.TotalSeconds >= _duration) break;
            }
            timer.Stop();
        }
    }

    // Listing Activity
    public class ListingActivity : BaseActivity
    {
        private List<string> _prompts = new List<string>
        {
            "Who are people that you appreciate?",
            "What are personal strengths of yours?",
            "Who are people that you have helped this week?",
            "When have you felt the Holy Ghost this month?",
            "Who are some of your personal heroes?"
        };

        private Random _random = new Random();

        public ListingActivity() : base(
            "Listing Activity",
            "This activity will help you reflect on the good things in your life by having you list as many things as you can in a certain area."
        ) { }

        protected override void PerformActivity()
        {
            string prompt = _prompts[_random.Next(_prompts.Count)];
            Console.WriteLine(prompt);
            Console.WriteLine("Get ready to list!");
            PauseWithCountdown(5); // Give user a few seconds to prepare

            int itemCount = 0;
            Stopwatch timer = new Stopwatch();
            timer.Start();

            Console.WriteLine("\nStart listing items (press Enter after each item. Press Enter on an empty line to finish early):");
            while (timer.Elapsed.TotalSeconds < _duration)
            {
                Console.Write($"Item {itemCount + 1}: ");
                string item = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(item))
                {
                    break; // User pressed Enter on an empty line
                }
                itemCount++;
                // Small sleep to prevent immediate re-prompting,
                // but not a long pause that affects user input flow
                Thread.Sleep(100);
            }
            timer.Stop();

            Console.WriteLine($"\nYou listed {itemCount} items.");
            PauseWithSpinner(3); // Pause before ending message
        }
    }
    public class App
    {
        // Dictionary to log the count of times each activity has been performed
        private Dictionary<string, int> _activitiesLog = new Dictionary<string, int>
        {
            { "Breathing Activity", 0 },
            { "Reflection Activity", 0 },
            { "Listing Activity", 0 }
        };

        public void Run()
        {
            while (true)
            {
                DisplayMenu();
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                BaseActivity activity = null;

                switch (choice)
                {
                    case "1":
                        activity = new BreathingActivity();
                        break;
                    case "2":
                        activity = new ReflectionActivity();
                        break;
                    case "3":
                        activity = new ListingActivity();
                        break;
                    case "4":
                        ViewActivityLog();
                        continue; // Go back to menu without incrementing log
                    case "5":
                        Console.WriteLine("Exiting the Mindfulness App. Namaste!");
                        return; // Exit the application
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        Thread.Sleep(1000); // Pause briefly before re-displaying menu
                        continue;
                }

                // If an activity was selected, run it and update the log
                if (activity != null)
                {
                    activity.Run();
                    _activitiesLog[activity._name]++;
                }
            }
        }

        private void DisplayMenu()
        {
            Console.Clear();
            Console.WriteLine("\n--- Mindfulness App Menu ---");
            Console.WriteLine("1. Start Breathing Activity");
            Console.WriteLine("2. Start Reflection Activity");
            Console.WriteLine("3. Start Listing Activity");
            Console.WriteLine("4. View Activity Log");
            Console.WriteLine("5. Exit");
            Console.WriteLine("----------------------------");
        }

        private void ViewActivityLog()
        {
            Console.Clear();
            Console.WriteLine("\n--- Activity Log ---");
            foreach (var entry in _activitiesLog)
            {
                Console.WriteLine($"{entry.Key}: {entry.Value} times completed");
            }
            Console.WriteLine("--------------------");
            Console.WriteLine("Press Enter to return to the menu...");
            Console.ReadLine(); // Wait for user to acknowledge
        }
    }
